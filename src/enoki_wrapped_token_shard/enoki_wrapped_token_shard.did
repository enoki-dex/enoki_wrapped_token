type ManagerContractData = record {
  fee : nat;
  deploy_time : nat64;
  underlying_token : principal;
  owner : principal;
  sibling_shards : vec principal;
  manager_contract : principal;
};
type Result = variant { Ok; Err : TxError };
type ShardedTransferNotification = record {
  to : principal;
  value : nat;
  data : text;
  from : principal;
  fee_charged : nat;
  from_shard : principal;
};
type TxError = variant {
  UnderlyingTransferFailure;
  TransferCallbackError : text;
  InsufficientBalance;
  TransferValueTooSmall;
  Unauthorized;
  AccountDoesNotExist : record { user : text; shard : text };
  ShardDoesNotExist;
  AccountAlreadyExists;
  Other : text;
};
service : (principal, principal) -> {
  addSiblingShard : (principal) -> ();
  addSpender : (principal) -> ();
  createAccount : (principal) -> ();
  getAccruedFees : () -> (nat) query;
  getFee : () -> (nat) query;
  getManagementDetails : () -> (ManagerContractData) query;
  getOwner : () -> (principal) query;
  initShard : (principal, vec principal, nat) -> ();
  mint : (nat) -> ();
  removeSiblingShard : (principal) -> ();
  removeSpender : (principal) -> ();
  setFee : (nat) -> (Result);
  setOwner : (principal) -> (Result);
  shardBalanceOf : (principal) -> (nat) query;
  shardGetSupply : () -> (nat) query;
  shardReceiveTransfer : (principal, nat) -> ();
  shardReceiveTransferAndCall : (
      ShardedTransferNotification,
      principal,
      text,
    ) -> (text);
  shardSpend : (principal, principal, principal, nat) -> ();
  shardSpendAndCall : (
      principal,
      principal,
      principal,
      nat,
      principal,
      text,
      text,
    ) -> (text);
  shardTransfer : (principal, principal, nat) -> ();
  shardTransferAndCall : (principal, principal, nat, principal, text, text) -> (
      text,
    );
  transferFromManager : (principal, principal, principal, nat) -> ();
  unwrap : (nat, principal) -> ();
  wrap : (nat) -> ();
}